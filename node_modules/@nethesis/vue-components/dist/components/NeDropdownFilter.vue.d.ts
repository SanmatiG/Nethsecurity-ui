import type { ButtonSize } from './NeButton.vue';
export type FilterKind = 'radio' | 'checkbox';
export type FilterOption = {
    id: string;
    label: string;
    description?: string;
    disabled?: boolean;
};
export interface Props {
    label: string;
    options: FilterOption[];
    kind: FilterKind;
    clearFilterLabel: string;
    openMenuAriaLabel: string;
    showClearFilter?: boolean;
    showSelectionCount?: boolean;
    noOptionsLabel: string;
    showOptionsFilter?: boolean;
    optionsFilterPlaceholder?: string;
    maxOptionsShown?: number;
    moreOptionsHiddenLabel: string;
    alignToRight?: boolean;
    size?: ButtonSize;
    disabled?: boolean;
    id?: string;
}
declare let __VLS_typeProps: Props;
type __VLS_PublicProps = {
    modelValue?: string[];
} & typeof __VLS_typeProps;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (modelValue: string[]) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((modelValue: string[]) => any) | undefined;
}>, {
    size: ButtonSize;
    disabled: boolean;
    id: string;
    maxOptionsShown: number;
    alignToRight: boolean;
    showClearFilter: boolean;
    showSelectionCount: boolean;
    showOptionsFilter: boolean;
    optionsFilterPlaceholder: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>, {
    button?(_: {}): any;
    label?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeDropdownFilter.vue.d.ts.map