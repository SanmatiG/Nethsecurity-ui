import { type PropType } from 'vue';
export type RadioCardSize = 'md' | 'lg' | 'xl';
type RadioOption = {
    id: string;
    label: string;
    description?: string;
    icon?: string;
    iconStyle?: string;
    disabled?: boolean;
};
declare function focus(): void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    options: {
        required: true;
        type: {
            (arrayLength: number): RadioOption[];
            (...items: RadioOption[]): RadioOption[];
            new (arrayLength: number): RadioOption[];
            new (...items: RadioOption[]): RadioOption[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
    };
    card: {
        type: BooleanConstructor;
        default: boolean;
    };
    gridStyle: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    cardSize: {
        type: PropType<RadioCardSize>;
        default: string;
    };
    cardSelectionMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    invalidMessage: {
        type: StringConstructor;
        default: string;
    };
}>, {
    focus: typeof focus;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    options: {
        required: true;
        type: {
            (arrayLength: number): RadioOption[];
            (...items: RadioOption[]): RadioOption[];
            new (arrayLength: number): RadioOption[];
            new (...items: RadioOption[]): RadioOption[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
    };
    card: {
        type: BooleanConstructor;
        default: boolean;
    };
    gridStyle: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    cardSize: {
        type: PropType<RadioCardSize>;
        default: string;
    };
    cardSelectionMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    invalidMessage: {
        type: StringConstructor;
        default: string;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    disabled: boolean;
    name: string;
    modelValue: string;
    invalidMessage: string;
    description: string;
    card: boolean;
    gridStyle: string;
    cardSize: RadioCardSize;
    cardSelectionMark: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>, {
    label?(_: {}): any;
    tooltip?(_: {}): any;
    option?(_: {
        option: RadioOption;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeRadioSelection.vue.d.ts.map