import { type PropType } from 'vue';
export type Breakpoint = 'sm' | 'md' | 'lg' | 'xl' | '2xl';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    ariaLabel: {
        type: StringConstructor;
        required: true;
    };
    cardBreakpoint: {
        type: PropType<Breakpoint>;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    skeletonRows: {
        type: NumberConstructor;
        default: number;
    };
    skeletonColumns: {
        type: NumberConstructor;
        default: number;
    };
    sortKey: {
        type: StringConstructor;
        default: string;
    };
    sortDescending: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    ariaLabel: {
        type: StringConstructor;
        required: true;
    };
    cardBreakpoint: {
        type: PropType<Breakpoint>;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    skeletonRows: {
        type: NumberConstructor;
        default: number;
    };
    skeletonColumns: {
        type: NumberConstructor;
        default: number;
    };
    sortKey: {
        type: StringConstructor;
        default: string;
    };
    sortDescending: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{}>, {
    loading: boolean;
    cardBreakpoint: Breakpoint;
    sortKey: string;
    sortDescending: boolean;
    skeletonRows: number;
    skeletonColumns: number;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>, {
    default?(_: {}): any;
    paginator?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeTable.vue.d.ts.map