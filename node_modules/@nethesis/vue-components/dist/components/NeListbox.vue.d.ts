export interface NeListboxOption {
    id: string;
    label: string;
    description?: string;
    rawObj?: any;
    disabled?: boolean;
}
export interface Props {
    modelValue: string | Array<NeListboxOption>;
    options: NeListboxOption[];
    label?: string;
    placeholder?: string;
    helperText?: string;
    invalidMessage?: string;
    multiple?: boolean;
    disabled?: boolean;
    showOptionsType?: boolean;
    optional?: boolean;
    noOptionsLabel: string;
    optionalLabel: string;
}
declare function focus(): void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<Props, {
    focus: typeof focus;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<Props> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    disabled: boolean;
    invalidMessage: string;
    options: NeListboxOption[];
    placeholder: string;
    helperText: string;
    multiple: boolean;
    showOptionsType: boolean;
    optional: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>, {
    tooltip?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeListbox.vue.d.ts.map