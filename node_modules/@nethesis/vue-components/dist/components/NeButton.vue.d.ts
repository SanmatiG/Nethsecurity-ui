import { type PropType } from 'vue';
export type ButtonKind = 'primary' | 'secondary' | 'tertiary' | 'danger';
export type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    kind: {
        type: PropType<ButtonKind>;
        default: string;
    };
    size: {
        type: PropType<ButtonSize>;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingPosition: {
        type: PropType<"prefix" | "suffix">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    kind: {
        type: PropType<ButtonKind>;
        default: string;
    };
    size: {
        type: PropType<ButtonSize>;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingPosition: {
        type: PropType<"prefix" | "suffix">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{}>, {
    size: ButtonSize;
    kind: ButtonKind;
    loading: boolean;
    loadingPosition: "prefix" | "suffix";
    disabled: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>, {
    prefix?(_: {}): any;
    default?(_: {}): any;
    suffix?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeButton.vue.d.ts.map