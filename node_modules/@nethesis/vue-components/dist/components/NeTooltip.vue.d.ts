import type { PropType } from 'vue';
export type TooltipPlacement = 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'auto' | 'auto-start' | 'auto-end';
export type TooltipTriggerEvent = 'click' | 'mouseenter focus' | 'focusin' | 'mouseenter click' | 'manual';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    placement: {
        type: PropType<TooltipPlacement>;
        default: string;
    };
    triggerEvent: {
        type: PropType<TooltipTriggerEvent>;
        default: string;
    };
    interactive: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    placement: {
        type: PropType<TooltipPlacement>;
        default: string;
    };
    triggerEvent: {
        type: PropType<TooltipTriggerEvent>;
        default: string;
    };
    interactive: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{}>, {
    placement: TooltipPlacement;
    triggerEvent: TooltipTriggerEvent;
    interactive: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>, {
    trigger?(_: {}): any;
    content?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeTooltip.vue.d.ts.map