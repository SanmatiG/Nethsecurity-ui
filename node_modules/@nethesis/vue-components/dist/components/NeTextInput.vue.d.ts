declare function focus(): void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    label: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    helperText: {
        type: StringConstructor;
        default: string;
    };
    invalidMessage: {
        type: StringConstructor;
        default: string;
    };
    optional: {
        type: BooleanConstructor;
    };
    isSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearSearchLabel: {
        type: StringConstructor;
        default: string;
    };
    isPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPasswordLabel: {
        type: StringConstructor;
        default: string;
    };
    hidePasswordLabel: {
        type: StringConstructor;
        default: string;
    };
    optionalLabel: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    focus: typeof focus;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    label: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    helperText: {
        type: StringConstructor;
        default: string;
    };
    invalidMessage: {
        type: StringConstructor;
        default: string;
    };
    optional: {
        type: BooleanConstructor;
    };
    isSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearSearchLabel: {
        type: StringConstructor;
        default: string;
    };
    isPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPasswordLabel: {
        type: StringConstructor;
        default: string;
    };
    hidePasswordLabel: {
        type: StringConstructor;
        default: string;
    };
    optionalLabel: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    disabled: boolean;
    modelValue: string;
    invalidMessage: string;
    id: string;
    placeholder: string;
    helperText: string;
    optional: boolean;
    optionalLabel: string;
    isSearch: boolean;
    clearSearchLabel: string;
    isPassword: boolean;
    showPasswordLabel: string;
    hidePasswordLabel: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>, {
    tooltip?(_: {}): any;
    prefix?(_: {}): any;
    suffix?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeTextInput.vue.d.ts.map