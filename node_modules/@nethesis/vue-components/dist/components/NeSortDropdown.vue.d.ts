import type { ButtonSize } from './NeButton.vue';
export type SortOption = {
    id: string;
    label: string;
};
export interface Props {
    label: string;
    options: SortOption[];
    openMenuAriaLabel: string;
    sortByLabel: string;
    sortDirectionLabel: string;
    ascendingLabel: string;
    descendingLabel: string;
    alignToRight?: boolean;
    size?: ButtonSize;
    disabled?: boolean;
    id?: string;
}
declare let __VLS_typeProps: Props;
type __VLS_PublicProps = {
    'sortKey'?: string;
    'sortDescending'?: boolean;
} & typeof __VLS_typeProps;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:sortKey": (sortKey: string) => any;
    "update:sortDescending": (sortDescending: boolean) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:sortKey"?: ((sortKey: string) => any) | undefined;
    "onUpdate:sortDescending"?: ((sortDescending: boolean) => any) | undefined;
}>, {
    size: ButtonSize;
    disabled: boolean;
    id: string;
    alignToRight: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>, {
    button?(_: {}): any;
    label?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeSortDropdown.vue.d.ts.map