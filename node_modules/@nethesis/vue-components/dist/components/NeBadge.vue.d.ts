import { type PropType } from 'vue';
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    /**
     * Size of the badge, can be 'sm' or 'xs', defaults to 'sm'.
     */
    size: {
        type: PropType<"sm" | "xs">;
        default: string;
    };
    /**
     * Badge kind, defaults to 'secondary'
     */
    kind: {
        type: PropType<"error" | "primary" | "secondary" | "tertiary" | "custom" | "info" | "warning" | "success">;
        default: string;
    };
    /**
     * Should the component be rounded or not.
     */
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Text to display inside the badge.
     */
    text: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Label below the text.
     */
    label: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    /**
     * Icon to display inside the badge.
     */
    icon: {
        type: ObjectConstructor;
        required: false;
        default: undefined;
    };
    /**
     * Should the icon be clickable or not
     */
    iconClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Position of the icon inside the badge.
     */
    iconPosition: {
        type: PropType<"right" | "left">;
        default: string;
    };
    /**
     * Tailwind color classes to apply if kind = 'custom'. E.g.: 'bg-sky-100 text-sky-700 dark:bg-sky-700 dark:text-sky-50'
     */
    customColorClasses: {
        type: StringConstructor;
        default: string;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    iconClick: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Size of the badge, can be 'sm' or 'xs', defaults to 'sm'.
     */
    size: {
        type: PropType<"sm" | "xs">;
        default: string;
    };
    /**
     * Badge kind, defaults to 'secondary'
     */
    kind: {
        type: PropType<"error" | "primary" | "secondary" | "tertiary" | "custom" | "info" | "warning" | "success">;
        default: string;
    };
    /**
     * Should the component be rounded or not.
     */
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Text to display inside the badge.
     */
    text: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Label below the text.
     */
    label: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    /**
     * Icon to display inside the badge.
     */
    icon: {
        type: ObjectConstructor;
        required: false;
        default: undefined;
    };
    /**
     * Should the icon be clickable or not
     */
    iconClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Position of the icon inside the badge.
     */
    iconPosition: {
        type: PropType<"right" | "left">;
        default: string;
    };
    /**
     * Tailwind color classes to apply if kind = 'custom'. E.g.: 'bg-sky-100 text-sky-700 dark:bg-sky-700 dark:text-sky-50'
     */
    customColorClasses: {
        type: StringConstructor;
        default: string;
    };
}>> & Readonly<{
    onIconClick?: ((...args: any[]) => any) | undefined;
}>, {
    size: "sm" | "xs";
    label: string;
    icon: Record<string, any>;
    kind: "error" | "primary" | "secondary" | "tertiary" | "custom" | "info" | "warning" | "success";
    rounded: boolean;
    customColorClasses: string;
    iconClickable: boolean;
    iconPosition: "right" | "left";
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
//# sourceMappingURL=NeBadge.vue.d.ts.map