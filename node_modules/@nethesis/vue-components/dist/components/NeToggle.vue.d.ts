import { type PropType } from 'vue';
type ToggleSize = 'sm' | 'md' | 'lg' | 'xl';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    topLabel: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<ToggleSize>;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    invalidMessage: {
        type: StringConstructor;
        default: string;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    topLabel: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<ToggleSize>;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    invalidMessage: {
        type: StringConstructor;
        default: string;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    size: ToggleSize;
    label: string;
    disabled: boolean;
    modelValue: boolean;
    invalidMessage: string;
    topLabel: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>, {
    topTooltip?(_: {}): any;
    tooltip?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=NeToggle.vue.d.ts.map